// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(TransactionsDbContext))]
    partial class TransactionsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("TRNX")
                .HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCash")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsElegibleForPayment")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OpenedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Accounts", "TRNX");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.AccountEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountMovements", "TRNX");
                });

            modelBuilder.Entity("Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Transaction", "TRNX");
                });

            modelBuilder.Entity("Domain.Entities.BankAccount", b =>
                {
                    b.HasBaseType("Domain.Entities.Account");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("BankAccounts", "TRNX");
                });

            modelBuilder.Entity("Domain.Entities.CreditCard", b =>
                {
                    b.HasBaseType("Domain.Entities.Account");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("CreditCards", "TRNX");
                });

            modelBuilder.Entity("Domain.Entities.AccountEntry", b =>
                {
                    b.HasOne("Domain.Entities.Account", null)
                        .WithMany("AccountEntries")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SharedKernel.Domain.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("AccountEntryId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Currency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18, 2)")
                                .HasColumnName("Amount");

                            b1.HasKey("AccountEntryId");

                            b1.ToTable("AccountMovements", "TRNX");

                            b1.WithOwner()
                                .HasForeignKey("AccountEntryId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.BankAccount", b =>
                {
                    b.HasOne("Domain.Entities.Account", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.BankAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.CreditCard", b =>
                {
                    b.HasOne("Domain.Entities.Account", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.CreditCard", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Navigation("AccountEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
